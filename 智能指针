1 智能指针的类别
（1）std::shared_ptr
（2）std::unique_ptr
（3）std::weak_ptr

2 智能指针的作用
 在传统的C++中（c++11以前），让程序员记得手动释放资源，总不是最佳的实践。因为程序员很有可能忘记了去释放资源而导致内存泄露。
 通常的一个做法是：我们在构造函数的时候申请资源，在析构函数的时候释放资源。这也就是我们常说的RAII（资源获取即初始化）

3 std::shared_ptr
  描述：使用引用计数记录有多少个shared_ptr共同指向同一个对象，当引用计数变为0的时候将对象自动删除。
  引用计数，不是垃圾回收，引用计数能够尽快收回不再被使用的对象，同时在回收的时候也不会造成长时间的等待，更能够清洗明确的表名资源的生命周期。
  
  源码分析：
    
  
 如何使用？
 （1）尽量使用std::make_sherad，它会创建对象，并返回这个对象的shared_ptr，避免显示的使用new。
    --> std::make_sherad的实现原理：使用了完美转发和可变参数模板。可变参数模板可以适配多个参数构造函数的调用。而完美转发可以保障参数可以左右值属性不变的传给对象的构造函数。
    【参考】https://blog.csdn.net/CPriLuke/article/details/79462791
 （2）
